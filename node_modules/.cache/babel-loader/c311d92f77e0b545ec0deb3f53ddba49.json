{"ast":null,"code":"class Game2048 {\n  rotateLeft(gameTable) {\n    const table = [...gameTable];\n    let result = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n    const maxCol = table[0].length;\n    table.forEach((row, i) => {\n      table[i] = [...gameTable[i]];\n      table[i].forEach((col, j) => {\n        const k = Math.abs(j - (maxCol - 1));\n        result[k][i] = table[i][j];\n      });\n    });\n    console.log('origin', table);\n    console.log('rotate', result);\n  }\n\n  moveTable(gameTable) {\n    const table = [...gameTable];\n    table.forEach((row, i) => {\n      table[i] = [...gameTable[i]];\n      const filteredRow = table[i].filter(v => v !== 0);\n      table[i].forEach((col, j) => {\n        table[i][j] = filteredRow[j] || 0;\n      });\n    });\n    console.log(table);\n  }\n\n  makeRandomBlock(gameTable) {\n    const table = [...gameTable];\n    const emptyTable = [];\n    table.forEach((row, i) => {\n      row.forEach((col, j) => {\n        if (table[i][j] === 0) {\n          emptyTable.push([i, j]);\n        }\n      });\n    });\n    const randomBlock = emptyTable[Math.floor(Math.random() * emptyTable.length)];\n    table[randomBlock[0]] = [...gameTable[randomBlock[0]]];\n    table[randomBlock[0]][randomBlock[1]] = 2;\n    return table;\n  }\n\n  startGame(row, col) {\n    const table = [];\n\n    for (let i = 0; i < row; i++) {\n      const rowData = [];\n      table.push(rowData);\n\n      for (let j = 0; j < col; j++) {\n        rowData.push(0);\n      }\n    }\n\n    return this.makeRandomBlock(this.makeRandomBlock(table));\n  }\n\n}\n\nexport default Game2048;","map":{"version":3,"sources":["C:/study/game2048/src/Game2048/Game2048.js"],"names":["Game2048","rotateLeft","gameTable","table","result","maxCol","length","forEach","row","i","col","j","k","Math","abs","console","log","moveTable","filteredRow","filter","v","makeRandomBlock","emptyTable","push","randomBlock","floor","random","startGame","rowData"],"mappings":"AAAA,MAAMA,QAAN,CAAe;AACXC,EAAAA,UAAU,CAACC,SAAD,EAAa;AACnB,UAAMC,KAAK,GAAG,CAAC,GAAGD,SAAJ,CAAd;AACA,QAAIE,MAAM,GAAG,CACT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADS,EAET,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFS,EAGT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAHS,EAIT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAJS,CAAb;AAMA,UAAMC,MAAM,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,MAAxB;AAEAH,IAAAA,KAAK,CAACI,OAAN,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AACtBN,MAAAA,KAAK,CAACM,CAAD,CAAL,GAAW,CAAC,GAAGP,SAAS,CAACO,CAAD,CAAb,CAAX;AACAN,MAAAA,KAAK,CAACM,CAAD,CAAL,CAASF,OAAT,CAAiB,CAACG,GAAD,EAAMC,CAAN,KAAY;AACzB,cAAMC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASH,CAAC,IAAIN,MAAM,GAAG,CAAb,CAAV,CAAV;AACAD,QAAAA,MAAM,CAACQ,CAAD,CAAN,CAAUH,CAAV,IAAeN,KAAK,CAACM,CAAD,CAAL,CAASE,CAAT,CAAf;AACH,OAHD;AAIH,KAND;AAQAI,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBb,KAAtB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBZ,MAAtB;AACH;;AAEDa,EAAAA,SAAS,CAACf,SAAD,EAAY;AACjB,UAAMC,KAAK,GAAG,CAAC,GAAGD,SAAJ,CAAd;AAEAC,IAAAA,KAAK,CAACI,OAAN,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AACtBN,MAAAA,KAAK,CAACM,CAAD,CAAL,GAAW,CAAC,GAAGP,SAAS,CAACO,CAAD,CAAb,CAAX;AACA,YAAMS,WAAW,GAAGf,KAAK,CAACM,CAAD,CAAL,CAASU,MAAT,CAAgBC,CAAC,IAAIA,CAAC,KAAK,CAA3B,CAApB;AAEAjB,MAAAA,KAAK,CAACM,CAAD,CAAL,CAASF,OAAT,CAAiB,CAACG,GAAD,EAAMC,CAAN,KAAY;AACzBR,QAAAA,KAAK,CAACM,CAAD,CAAL,CAASE,CAAT,IAAcO,WAAW,CAACP,CAAD,CAAX,IAAkB,CAAhC;AACH,OAFD;AAGH,KAPD;AASAI,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACH;;AAEDkB,EAAAA,eAAe,CAAEnB,SAAF,EAAa;AACxB,UAAMC,KAAK,GAAG,CAAC,GAAGD,SAAJ,CAAd;AACA,UAAMoB,UAAU,GAAG,EAAnB;AAEAnB,IAAAA,KAAK,CAACI,OAAN,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AACtBD,MAAAA,GAAG,CAACD,OAAJ,CAAY,CAACG,GAAD,EAAMC,CAAN,KAAY;AACpB,YAAIR,KAAK,CAACM,CAAD,CAAL,CAASE,CAAT,MAAgB,CAApB,EAAuB;AACnBW,UAAAA,UAAU,CAACC,IAAX,CAAgB,CAACd,CAAD,EAAIE,CAAJ,CAAhB;AACH;AACJ,OAJD;AAKH,KAND;AAQA,UAAMa,WAAW,GAAGF,UAAU,CAACT,IAAI,CAACY,KAAL,CAAWZ,IAAI,CAACa,MAAL,KAAgBJ,UAAU,CAAChB,MAAtC,CAAD,CAA9B;AACAH,IAAAA,KAAK,CAACqB,WAAW,CAAC,CAAD,CAAZ,CAAL,GAAwB,CAAC,GAAGtB,SAAS,CAACsB,WAAW,CAAC,CAAD,CAAZ,CAAb,CAAxB;AACArB,IAAAA,KAAK,CAACqB,WAAW,CAAC,CAAD,CAAZ,CAAL,CAAsBA,WAAW,CAAC,CAAD,CAAjC,IAAwC,CAAxC;AAEA,WAAOrB,KAAP;AACH;;AAEDwB,EAAAA,SAAS,CAACnB,GAAD,EAAME,GAAN,EAAW;AAChB,UAAMP,KAAK,GAAG,EAAd;;AAEA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;AAC1B,YAAMmB,OAAO,GAAG,EAAhB;AACAzB,MAAAA,KAAK,CAACoB,IAAN,CAAWK,OAAX;;AACA,WAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;AAC1BiB,QAAAA,OAAO,CAACL,IAAR,CAAa,CAAb;AACH;AACJ;;AAED,WAAO,KAAKF,eAAL,CAAqB,KAAKA,eAAL,CAAqBlB,KAArB,CAArB,CAAP;AACH;;AArEU;;AAyEf,eAAeH,QAAf","sourcesContent":["class Game2048 {\r\n    rotateLeft(gameTable)  {\r\n        const table = [...gameTable];\r\n        let result = [\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0],\r\n            [0, 0, 0, 0]\r\n        ];\r\n        const maxCol = table[0].length;\r\n\r\n        table.forEach((row, i) => {\r\n            table[i] = [...gameTable[i]];\r\n            table[i].forEach((col, j) => {\r\n                const k = Math.abs(j - (maxCol - 1));\r\n                result[k][i] = table[i][j];\r\n            });\r\n        });\r\n\r\n        console.log('origin', table);\r\n        console.log('rotate', result);\r\n    };\r\n\r\n    moveTable(gameTable) {\r\n        const table = [...gameTable];\r\n\r\n        table.forEach((row, i) => {\r\n            table[i] = [...gameTable[i]];\r\n            const filteredRow = table[i].filter(v => v !== 0 );\r\n\r\n            table[i].forEach((col, j) => {\r\n                table[i][j] = filteredRow[j] || 0;\r\n            });\r\n        });\r\n\r\n        console.log(table);\r\n    };\r\n\r\n    makeRandomBlock (gameTable) {\r\n        const table = [...gameTable];\r\n        const emptyTable = [];\r\n\r\n        table.forEach((row, i) => {\r\n            row.forEach((col, j) => {\r\n                if (table[i][j] === 0) {\r\n                    emptyTable.push([i, j]);\r\n                }\r\n            });\r\n        });\r\n\r\n        const randomBlock = emptyTable[Math.floor(Math.random() * emptyTable.length)];\r\n        table[randomBlock[0]] = [...gameTable[randomBlock[0]]];\r\n        table[randomBlock[0]][randomBlock[1]] = 2;\r\n\r\n        return table;\r\n    }\r\n\r\n    startGame(row, col) {\r\n        const table = [];\r\n\r\n        for (let i = 0; i < row; i++) {\r\n            const rowData = [];\r\n            table.push(rowData);\r\n            for (let j = 0; j < col; j++) {\r\n                rowData.push(0);\r\n            }\r\n        }\r\n\r\n        return this.makeRandomBlock(this.makeRandomBlock(table));\r\n    }\r\n\r\n}\r\n\r\nexport default Game2048;"]},"metadata":{},"sourceType":"module"}