{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\game2048\\\\src\\\\Game2048.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Table from \"./Table\";\nimport { atom, useRecoilState, useRecoilValue } from \"recoil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const tableState = atom({\n  key: 'tableState',\n  default: {\n    tableSize: {\n      row: 4,\n      col: 4\n    }\n  }\n});\nexport const gameTableState = atom({\n  key: 'gameTableState',\n  default: []\n});\n\nconst makeRandomBlock = gameTable => {\n  const table = [...gameTable];\n  const size = table.length * table[0].length;\n  const randomBlock = Math.floor(Math.random() * size);\n  const row = parseInt(randomBlock / table.length);\n  const col = randomBlock % table.length;\n\n  if (table[row][col] !== 0) {\n    makeRandomBlock(table);\n  } else {\n    table[row] = [...gameTable[row]];\n    table[row][col] = 2;\n  }\n\n  return table;\n};\n\nconst startGame = (row, col) => {\n  const table = [];\n\n  for (let i = 0; i < row; i++) {\n    const rowData = [];\n    table.push(rowData);\n\n    for (let j = 0; j < col; j++) {\n      rowData.push(0);\n    }\n  }\n\n  return table;\n};\n\nconst Game2048 = () => {\n  _s();\n\n  const [gameTable, setGameTable] = useRecoilState(gameTableState);\n  const {\n    tableSize\n  } = useRecoilValue(tableState);\n\n  const onClickStart = () => {\n    let table = startGame(tableSize.row, tableSize.col);\n    makeRandomBlock(table);\n    setGameTable(table);\n  };\n\n  const onClickTest = () => {\n    const table = makeRandomBlock(gameTable);\n    console.log(table);\n    setGameTable(table);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Table, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickStart,\n      children: \"\\uC2DC\\uC791!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickTest,\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Game2048, \"0OHVYbaeamZ4RYz/LZgJD68iqFg=\", false, function () {\n  return [useRecoilState, useRecoilValue];\n});\n\n_c = Game2048;\nexport default Game2048;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game2048\");","map":{"version":3,"sources":["C:/study/game2048/src/Game2048.js"],"names":["React","Table","atom","useRecoilState","useRecoilValue","tableState","key","default","tableSize","row","col","gameTableState","makeRandomBlock","gameTable","table","size","length","randomBlock","Math","floor","random","parseInt","startGame","i","rowData","push","j","Game2048","setGameTable","onClickStart","onClickTest","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Table from \"./Table\";\r\nimport {\r\n    atom, useRecoilState, useRecoilValue\r\n} from \"recoil\";\r\n\r\nexport const tableState = atom({\r\n    key: 'tableState',\r\n    default: {\r\n        tableSize: {\r\n            row: 4,\r\n            col: 4,\r\n        }\r\n    },\r\n});\r\n\r\nexport const gameTableState = atom({\r\n    key: 'gameTableState',\r\n    default: [],\r\n});\r\n\r\nconst makeRandomBlock = (gameTable) => {\r\n    const table = [...gameTable];\r\n    const size = table.length * table[0].length;\r\n    const randomBlock = Math.floor(Math.random() * size);\r\n\r\n    const row = parseInt(randomBlock / table.length);\r\n    const col = randomBlock % table.length;\r\n\r\n    if (table[row][col] !== 0) {\r\n        makeRandomBlock(table);\r\n    } else {\r\n        table[row] = [...gameTable[row]];\r\n        table[row][col] = 2;\r\n    }\r\n    return table;\r\n}\r\n\r\nconst startGame = (row, col) => {\r\n    const table = [];\r\n\r\n    for (let i = 0; i < row; i++) {\r\n        const rowData = [];\r\n        table.push(rowData);\r\n        for (let j = 0; j < col; j++) {\r\n            rowData.push(0);\r\n        }\r\n    }\r\n    return table;\r\n}\r\n\r\nconst Game2048 = () => {\r\n    const [gameTable, setGameTable] = useRecoilState(gameTableState);\r\n    const { tableSize } = useRecoilValue(tableState);\r\n\r\n    const onClickStart = () => {\r\n        let table = startGame(tableSize.row, tableSize.col)\r\n        makeRandomBlock(table);\r\n        setGameTable(table);\r\n    };\r\n\r\n    const onClickTest = () => {\r\n        const table = makeRandomBlock(gameTable);\r\n        console.log(table);\r\n        setGameTable(table);\r\n    }\r\n    return (\r\n        <>\r\n            <Table/>\r\n            <button onClick={onClickStart}>시작!!</button>\r\n            <button onClick={onClickTest}>Test</button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Game2048;"]},"metadata":{},"sourceType":"module"}